.post_detail
  .close-view
    %span.glyphicon.glyphicon-remove
  .col-md-12.posts
    .avatar-area 
      = image_tag @post.user.avatar.url
    .option-area
      .option
        %span.option_item
        %span.option_item
        %span.option_item
      .option-menu
        - if @post.user == current_user
          %li 
            .destroy-post{'data-id': "#{@post.id}" } Delete
          %li
            .edit-post{'data-id': "#{@post.id}" } Edit
    %li.content_item{'post-id': "#{@post.id}"}
      %span.content
        %span.timestamp
          = link_to @post.user.name, wall_path(@post.user.id)
          = time_ago_in_words(post.updated_at)
        %span.content-area
          = @post.content
        - @post.pictures.each do |p|
          = image_tag p.picture_url.url
      .like-area
        .like
          - if @post.likes.find_by(user: current_user).nil?
            = form_for ([@post, @post.likes.build]) do |f|
              = f.button "", type: :submit , class: "fa fa-heart-o heart"
              = @post.likes.count
          - else
            .destroy-like
              %i.fa.fa-heart-o.destroy-like-button{'data-id': "#{@post.likes.find_by(user: current_user).id}", 'post-id': "#{@post.id}"}
              = @post.likes.count
        %i.fa.fa-comments-o
        = @post.comments.count
        - if @post.comments.present?
          .comment-area
            - @post.comments.each do |comment|
              %span.comment_item
                .avatar-comment-area 
                  = image_tag comment.user.avatar.url
                .comment_detail
                  = link_to comment.user.name, wall_path(comment.user.id)
                  .comment-show-area
                    %span= comment.content
                  .edit_delete
                    .destroy-comment{'data-id': "#{comment.id}", '@post-id': "#{@post.id}" } Delete
                    .edit-comment{'data-id': "#{comment.id}", '@post-id': "#{@post.id}" } Edit
                    .time-comment
                      = time_ago_in_words(@post.updated_at)
                      ago.
        = form_for ([@post, @post.comments.build]) do |f|
          = f.text_field :content, placeholder: "Comment ...", class: "comment_textbox"